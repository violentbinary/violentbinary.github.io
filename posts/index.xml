<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - Violent Binary</title>
        <link>https://violentbinary.github.io/posts/</link>
        <description>All Posts | Violent Binary</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 14 Apr 2022 23:11:10 &#43;0800</lastBuildDate><atom:link href="https://violentbinary.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Simple Analysis of Software Virtualization of Memory in Unicorn Engine</title>
    <link>https://violentbinary.github.io/posts/2-simple-analysis-of-software-virtualization-of-memory-in-unicorn-engine/</link>
    <pubDate>Thu, 14 Apr 2022 23:11:10 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://violentbinary.github.io/posts/2-simple-analysis-of-software-virtualization-of-memory-in-unicorn-engine/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/2-null-pointer/title.png" referrerpolicy="no-referrer">
            </div>Unicorn Engine is cut from QEMU, it can be said to be a branch of QEMU, but it is a completely independent project. Unicorn provides a wealth of APIs, allowing us to easily experience many features brought by QEMU virtualization technology, but it also faces some security issues. We take the analysis of CVE-2022-29694 as an example to briefly outline the principle of Unicorn memory virtualization. Only some simple analysis is made here, so that everyone can quickly grasp the whole picture of QEMU virtualization.]]></description>
</item><item>
    <title>ELF Static Injection to Load Malicious Dynamic Link Library</title>
    <link>https://violentbinary.github.io/posts/1-elf-static-injection-to-load-malicious-dynamic-link-library/</link>
    <pubDate>Sun, 07 Nov 2021 21:13:39 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://violentbinary.github.io/posts/1-elf-static-injection-to-load-malicious-dynamic-link-library/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/1-elf-sj/elf-sj-title.jpg" referrerpolicy="no-referrer">
            </div>TL;DR In this blog post, I will go through the process of why and how I built a new framework called spirit ðŸŽƒ, using which, I was able to load malicious dynamic link library by injecting parasitic code into the ELF file. You will see the huge difference between this static injection and the tranditional so Hijacking in Linux.
Introduction As we know, whether it is dll hijacking in Windows or so hijacking in Linux, their idea is to insert code when the program is running to load the dynamic link library (so).]]></description>
</item></channel>
</rss>
